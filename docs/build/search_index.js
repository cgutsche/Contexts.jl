var documenterSearchIndex = {"docs":
[{"location":"PetriNets/#Petri-Nets","page":"Petri Nets","title":"Petri Nets","text":"","category":"section"},{"location":"PetriNets/#Why-Petri-Nets?","page":"Petri Nets","title":"Why Petri Nets?","text":"","category":"section"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"In large-scale systems with many contexts, the control of the activeness of all contexts can be a formidable challenge. Simple logical rules with nested and cascaded if-statements might get to complex and messy. Advanced control mechanisms like state charts are sometimes not flexible enough. An intersting candidate for a safe and in the best case even varifyable context control is the Petri net.","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"A Petri net is a graph consisting of places and transitions that can be connected by arcs. A place can contain tokens and arcs are weighted. A transition can fire if for all places that are connected to the transition with incoming arcs, the token number is greater or equal to the arc's weight. When a transition fires, the the token number of the connected places is reduced by the arcs weight and the token number of places, connected via outgoing arcs is increased by their corresponding weight.","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"Contexts.jl uses Petri nets to manage context activation and transitions. Petri nets are defined by places, transitions, and arcs. Use the provided types and functions to build, compile, and manage Petri nets for your context logic.","category":"page"},{"location":"PetriNets/#Contextual-Petri-Nets","page":"Petri Nets","title":"Contextual Petri Nets","text":"","category":"section"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"To implement Petri nets that can control contexts, a Petri net similar to the one defined in  “Feature petri nets” by R. Muschevici, D. Clarke and J. Proenca from 2010 is implemented. The Features are context in the case discussed here. Additionally to the firing conditions of a basic Petri net, the firing of a transition can be blocked by the (de)activeness of contexts. Also, the firing can update the context's activeness which allows real context control.","category":"page"},{"location":"PetriNets/#Places","page":"Petri Nets","title":"Places","text":"","category":"section"},{"location":"PetriNets/#Contexts.Place","page":"Petri Nets","title":"Contexts.Place","text":"Place <: PNObject\n\nRepresents a place in a Petri net, holding tokens.\n\nFields:\n\nname: Name of the place\ntoken: Number of tokens\n\nExample:     Place(\"p1\", 1)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"A Place should be defined with a name an a start token number:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"p1 = Place(\"p1\", 7)\np2 = Place(\"p2\", 0)\np3 = Place(\"p3\", 1)","category":"page"},{"location":"PetriNets/#Transitions","page":"Petri Nets","title":"Transitions","text":"","category":"section"},{"location":"PetriNets/#Contexts.Transition","page":"Petri Nets","title":"Contexts.Transition","text":"Transition <: PNObject\n\nRepresents a transition in a Petri net.\n\nFields:\n\nname: Name of the transition\ncontexts: Contexts or context rules for the transition\nupdates: Array of Update actions\n\nExample:     Transition(\"t1\", ctx, [Update(ctx, on)])\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/#Contexts.Update","page":"Petri Nets","title":"Contexts.Update","text":"Update\n\nRepresents an update action for a context in a Petri net transition.\n\nFields:\n\ncontext: Context to update\nupdateValue: UpdateValue (on/off)\n\nExample:     Update(ctx, on)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/#Base.:=>-Tuple{Context, Contexts.UpdateValue}","page":"Petri Nets","title":"Base.:=>","text":"Base.:(=>)(context::Context, updateValue::UpdateValue)\n\nCreates an Update object using the => operator.\n\nArguments:\n\ncontext: Context to update\nupdateValue: UpdateValue (on/off)\n\nReturns an Update object.\n\nExample:     ctx => on\n\n\n\n\n\n","category":"method"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"A transition also has a name an Context that can block the firing as well as a list of context updates that are performed when firing:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"t1 = Transition(\"t1\", C1, [])\nt2 = Transition(\"t2\", C2, [Update(C1, off)])\nt3 = Transition(\"t3\", nothing, [C1 => off])","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"If there should not be a blocking context, nothing should be inserted. A transition without any Updates can be defined by an empty update list.","category":"page"},{"location":"PetriNets/#Arcs","page":"Petri Nets","title":"Arcs","text":"","category":"section"},{"location":"PetriNets/#Contexts.NormalArc","page":"Petri Nets","title":"Contexts.NormalArc","text":"NormalArc <: Arc\n\nRepresents a normal arc between Petri net objects.\n\nFields:\n\nfrom: Source PNObject\nto: Target PNObject\nweight: Arc weight\npriority: Arc priority (default 0)\n\nExample:     NormalArc(from=obj1, to=obj2, weight=1)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/#Contexts.InhibitorArc","page":"Petri Nets","title":"Contexts.InhibitorArc","text":"InhibitorArc <: Arc\n\nRepresents an inhibitor arc from a place to a transition.\n\nFields:\n\nfrom: Source Place\nto: Target Transition\nweight: Arc weight\n\nExample:     InhibitorArc(p, t, 1)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/#Contexts.TestArc","page":"Petri Nets","title":"Contexts.TestArc","text":"TestArc <: Arc\n\nRepresents a test arc from a place to a transition.\n\nFields:\n\nfrom: Source Place\nto: Target Transition\nweight: Arc weight\n\nExample:     TestArc(p, t, 1)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"For arcs there are three types:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"NormalArc: a normal Petri nets arc that can connect a place with a transition or the other way around. The third argument is the arc's weight. A normal arc will only allow firing if the token number is greater than or equal to the arc's weight. The 4th argument is a priority that makes sense when there are mutliple outgoing arcs at a place. Priorities can prevent conflicts in the token deletion.\nInhibitorArc: a inhibitor arc can only connect a place to a transition. Inhibitor arcs allow firing when the token number is smaller than the arc's weight and do not cause token decreasement in this place.\nTestArc: a test arc can also only connect a place to a transition. Test arcs allow firing when the token number is larger than the arc's weight and do not cause token decreasement in this place just like an inhibitor arc.","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"The definition in julia look like the following way:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"arcs = [NormalArc(p1, t1, 2, 1),\n\t\tNormalArc(p1, t2, 1, 2), \n\t\tNormalArc(t1, p2, 1, 1), \n\t\tInhibitorArc(p3, t2, 3), \n\t\tTestArc(p2, t2, 2)]","category":"page"},{"location":"PetriNets/#Composing-the-Petri-Net","page":"Petri Nets","title":"Composing the Petri Net","text":"","category":"section"},{"location":"PetriNets/#Contexts.PetriNet","page":"Petri Nets","title":"Contexts.PetriNet","text":"PetriNet\n\nRepresents a Petri net with places, transitions, and arcs.\n\nFields:\n\nplaces: Vector of places\ntransitions: Vector of transitions\narcs: Vector of arcs\n\nExample:     PetriNet(places=[p1], transitions=[t1], arcs=[a1])\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"When all components are defined, the Petri net object can be defined with a list of contained places, transitions and arcs:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"pn = PetriNet([p1, p2, p3], [t1, t2, t3], arcs)","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"If you want to run the Petri net, such a component-based definition is not very computation friendly. One way to calculate the states of a running Petri net is based on a matrix representation of the Petri net. To get this matrices, the compile(::PetriNet) function can be used:","category":"page"},{"location":"PetriNets/#Contexts.compile-Tuple{PetriNet}","page":"Petri Nets","title":"Contexts.compile","text":"compile(pn::PetriNet)\n\nCompiles a PetriNet into a CompiledPetriNet for efficient execution.\n\nArguments:\n\npn: PetriNet object\n\nReturns a CompiledPetriNet.\n\nExample:     compile(pn)\n\n\n\n\n\n","category":"method"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"compiled_pn = compile(pn)","category":"page"},{"location":"PetriNets/#Contexts.CompiledPetriNet","page":"Petri Nets","title":"Contexts.CompiledPetriNet","text":"CompiledPetriNet\n\nRepresents a compiled Petri net for efficient execution.\n\nFields:\n\nWeightMatrix_in, WeightMatrix_out, WeightMatrix_inhibitor, WeightMatrix_test: Matrices for arc weights\ntokenVector: Vector of tokens\nPrioritiesMatrix: Matrix of priorities\nContextMatrices: Vector of context matrices\nUpdateMatrix: Matrix of updates\nContextMap: Mapping of contexts\n\nExample:     CompiledPetriNet(...)\n\n\n\n\n\n","category":"type"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"The weights of the arcs, the tokens and also the contexts, updates and priorities are converted to a matrix (or vector) representation. ","category":"page"},{"location":"PetriNets/#Running-the-Petri-Net","page":"Petri Nets","title":"Running the Petri Net","text":"","category":"section"},{"location":"PetriNets/#Contexts.runPN","page":"Petri Nets","title":"Contexts.runPN","text":"runPN(pn::Nothing)\n\nNull case for running a Petri net when no net is provided. Returns true without doing anything.\n\n\n\n\n\nrunPN(pn::CompiledPetriNet)\n\nExecutes a compiled Petri net until it reaches a dead state (no more transitions can fire). Updates context states based on the Petri net execution.\n\nArguments:\n\npn: A compiled Petri net containing the network structure and current state\n\nReturns nothing, but modifies the Petri net state and context activations.\n\n\n\n\n\nrunPN(pn::CompiledPetriNet, N::Int)\n\nExecutes a compiled Petri net for a maximum of N steps or until it reaches a dead state. Updates context states based on the Petri net execution.\n\nArguments:\n\npn: A compiled Petri net containing the network structure and current state\nN: Maximum number of steps to execute\n\nPrints \"Petri net is dead.\" if no transitions can fire before N steps. Returns nothing, but modifies the Petri net state and context activations.\n\n\n\n\n\n","category":"function"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"With this representation the states of the Petri net can be calculated step-wise. In the implementation here, every transition, that can fire simultaneously without creating conflicts, fires. If only N steps of the Petri net's time evolution should be calculated, use:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"runPN(compiled_pn, N)","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"If you want to let the Petri net run until no transitions can fire anymore, use:","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"runPN(compiled_pn)","category":"page"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"warning: Infinite PN run\nBe careful, Petri nets do not necessarily need to have reachable dead states. In this case the program would not finish.","category":"page"},{"location":"PetriNets/#Adding-Petri-Net-to-Context-Control","page":"Petri Nets","title":"Adding Petri Net to Context Control","text":"","category":"section"},{"location":"PetriNets/","page":"Petri Nets","title":"Petri Nets","text":"Custom defined Petri nets can be added to the context control logic, if the constraints are not sufficient:","category":"page"},{"location":"PetriNets/#Contexts.addPNToControlPN-Tuple{PetriNet}","page":"Petri Nets","title":"Contexts.addPNToControlPN","text":"addPNToControlPN(pn::PetriNet; priority::Int=1)\n\nAdds a PetriNet to the control PetriNet list at the given priority. Compiles and merges the PetriNet as needed.\n\n\n\n\n\n","category":"method"},{"location":"Contexts/#Contexts","page":"Contexts","title":"Contexts","text":"","category":"section"},{"location":"Contexts/#Why-Contexts?","page":"Contexts","title":"Why Contexts?","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Contexts are an interesting approach to achieve dynamic behavior of objects. Let's think of a program, controling a robot. A robot may act differently when a human is nearby or not. Another example is an energy system that should behave differently on a sunny summer day than on a cloudy and snowy winter day. The context, in which such a program runs could be defined as sunnyDay, warmWeather or humanNearby. It describes the properties of the environment or situation in which the software runs.","category":"page"},{"location":"Contexts/#Context-Definition-in-Contexts.jl","page":"Contexts","title":"Context Definition in Contexts.jl","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"In Contexts.jl, Context is an abstract type.","category":"page"},{"location":"Contexts/#Contexts.Context","page":"Contexts","title":"Contexts.Context","text":"Context <: AbstractContext\n\nAbstract supertype for all concrete context types.\n\n\n\n\n\n","category":"type"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"By defining a new Context, a new struct <ContextName>ContextType will be created as a subtype of Context:","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"struct <ContextName>ContextType <: Context end","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"and then, a singleton object of this type is defined:","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":" <ContextName> = <ContextName>ContextType()","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"In that way, contexts are available as arguments of methods to be utilized by the multiple dispatch.","category":"page"},{"location":"Contexts/#Context-Usage","page":"Contexts","title":"Context Usage","text":"","category":"section"},{"location":"Contexts/#Defining-new-Contexts-with-@newContext-Macro","page":"Contexts","title":"Defining new Contexts with @newContext Macro","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"To create a new context, use the @newContext macro:","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@newContext Context1","category":"page"},{"location":"Contexts/#Contexts.@newContext","page":"Contexts","title":"Contexts.@newContext","text":"@newContext(contextName)\n\nMacro to define a new context type and singleton instance. Accepts a String, Symbol, or an expression of multiple names. Creates a struct subtype of Context and registers it.\n\nExample: \t@newContext(\"MyContext\") \t@newContext(AnotherContext) \t@newContext FirstContext, SecondContext\n\n\n\n\n\n","category":"macro"},{"location":"Contexts/#Context-dependent-Behavior-with-the-@context-Macro","page":"Contexts","title":"Context-dependent Behavior with the @context Macro","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Since Context1 is now available as a variable representing a value of the context-specific type Context1ContextType, it can be used in function arguments and using the multiple dispatch, context-dependent behavior is realized. For easier Syntax, the macro @context is defined. Depending on its usage, it fulfills different tasks.","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Calling @context on a function definition will define a context depening function, by adding an attribute of type Context1ContextType as the first function argument:","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@context Context1 function HelloWorld()\n\tprintln(\"Hello World in Context 1!\")\nend ","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@context Context2 function HelloWorld()\n\tprintln(\"Hello World in Context 2!\")\nend ","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Calling @context on a function (or macro) call will add the context as the first attribute.","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@context Context1 HelloWorld()","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"will therefore print Hello World in Context 1! and ","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@context Context2 HelloWorld()","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"will print Hello World in Context 2!. This also means that executing HelloWorld(Context1) would also print Hello World in Context 1!. Also the variable context is available in functions.","category":"page"},{"location":"Contexts/#Contexts.@context","page":"Contexts","title":"Contexts.@context","text":"@context(cname, expr)\n\nMacro to inject context information into a function or macro call or function definition. Adds context type or name as an argument to the function or macro.\n\nA generic context type can be specified with Any.\n\nArguments:\n\ncname: Context name or type\nexpr: Function, macro call, or function definition\n\nExample:     @context MyContext function myfunc(x::myType) \t\t... \tend \t@context Any function myfunc(x::myType) \t\t... \tend     @context MyContext myfunc(x)\n\n\n\n\n\n","category":"macro"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"tip: Functions for multiple contexts\nIt is also possible to use a tuple of multiple contexts:@context (Context1, Context2) HelloWorld()","category":"page"},{"location":"Contexts/#Activeness-of-Contexts","page":"Contexts","title":"Activeness of Contexts","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"When programming with contexts, you might want to define all possible contexts at the beginning, but only some of them are active at the same time. Therefore the contexts in Contexts.jl can be activated and deactivated by  ","category":"page"},{"location":"Contexts/#Contexts.activateContext","page":"Contexts","title":"Contexts.activateContext","text":"activateContext(context::T) where {T <: Context}\n\nActivates a context and runs compiled PetriNet.\n\n\n\n\n\n","category":"function"},{"location":"Contexts/#Contexts.deactivateContext","page":"Contexts","title":"Contexts.deactivateContext","text":"deactivateContext(context::T) where {T <: Context}\n\nDeactivates a context and runs compiled PetriNet.\n\n\n\n\n\n","category":"function"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"After the definition of a context, the context will be deactive. When a clean start is needed, the function","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"deactivateAllContexts()","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"can help.","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Note, that functions can of course also run when a deactivated context is handed as a function argument. The activeness of a context can be checked with:","category":"page"},{"location":"Contexts/#Contexts.isActive-Tuple{Context}","page":"Contexts","title":"Contexts.isActive","text":"isActive(context::T) where {T <: Context}\n\nChecks if a context is currently active. Returns true if active, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"This can be used in if-statements to avoid calling functions with deactivated contexts or to have varying functionality depending on activeness.","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"@context Context1 function printContext()\n\tisActive(context) ? println(\"Context is active\") : println(\"Context is not active\")\nend","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"The macro @activeContext only calls the function if the context is active:","category":"page"},{"location":"Contexts/#Contexts.@activeContext","page":"Contexts","title":"Contexts.@activeContext","text":"@activeContext(cname, expr)\n\nMacro to conditionally execute a function or macro call only if the context is active. Wraps the call in an if isActive(context) block.\n\nArguments:\n\ncname: Context name or type\nexpr: Function or macro call\n\nExample:     @activeContext(MyContext, myfunc(x))\n\n\n\n\n\n","category":"macro"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"tip: Context Groups and State machines\nA more conventient way to work with contexts and context-specific functions is via context groups and state machines, see ContextGroup and ContextStateMachine.","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"As explained in Context Modeling, activating contexts will run Petri nets that check the compliance of the contexts' activeness with constraints. However, it is also possible to (de-)activate contexts without the Petri net. This can be helpful to reach valid initial states.","category":"page"},{"location":"Contexts/#Contexts.activateContextWithoutPN","page":"Contexts","title":"Contexts.activateContextWithoutPN","text":"activateContextWithoutPN(context::T) where {T <: Context}\n\nActivates a context without running PetriNet logic. Mainly used for internal. Should be used with caution\n\n\n\n\n\n","category":"function"},{"location":"Contexts/#Contexts.deactivateContextWithoutPN","page":"Contexts","title":"Contexts.deactivateContextWithoutPN","text":"deactivateContextWithoutPN(context::T) where {T <: Context}\n\nDeactivates a context without running PetriNet logic. Mainly used for internal. Should be used with caution\n\n\n\n\n\n","category":"function"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"warning: (De)Activating contexts without PN\n(de)activating contexts without Petri nets can lead to reaching invalid states that are not correctly healed after running the PN.","category":"page"},{"location":"Contexts/#Boolean-Expressions-on-Contexts","page":"Contexts","title":"Boolean Expressions on Contexts","text":"","category":"section"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"The |,  & and  ! operators can be used to create Boolean expressions on Contexts.","category":"page"},{"location":"Contexts/#Contexts.OrContextRule","page":"Contexts","title":"Contexts.OrContextRule","text":"OrContextRule <: AbstractContextRule\n\nRepresents a logical OR between two contexts or context rules.\n\nFields:\n\nc1, c2: Contexts or context rules.\n\nExample:     OrContextRule(ctx1, ctx2)\n\n\n\n\n\n","category":"type"},{"location":"Contexts/#Contexts.AndContextRule","page":"Contexts","title":"Contexts.AndContextRule","text":"AndContextRule <: AbstractContextRule\n\nRepresents a logical AND between two contexts or context rules.\n\nFields:\n\nc1, c2: Contexts or context rules.\n\nExample:     AndContextRule(ctx1, ctx2)\n\n\n\n\n\n","category":"type"},{"location":"Contexts/#Contexts.NotContextRule","page":"Contexts","title":"Contexts.NotContextRule","text":"NotContextRule <: AbstractContextRule\n\nRepresents a logical NOT of a context or context rule.\n\nFields:\n\nc: Context or context rule.\n\nExample:     NotContextRule(ctx)\n\n\n\n\n\n","category":"type"},{"location":"Contexts/#Base.:|-Tuple{Contexts.AbstractContext, Contexts.AbstractContext}","page":"Contexts","title":"Base.:|","text":"Base.:|(c1::CT1, c2::CT2) where {CT1, CT2 <: Union{AbstractContext}}\n\nCreates an OrContextRule from two contexts or context rules using the | operator.\n\nArguments:\n\nc1, c2: Contexts or context rules\n\nReturns an OrContextRule.\n\nExample:     ctx1 | ctx2\n\n\n\n\n\n","category":"method"},{"location":"Contexts/#Base.:&-Tuple{Contexts.AbstractContext, Contexts.AbstractContext}","page":"Contexts","title":"Base.:&","text":"Base.:&(c1::CT1, c2::CT2) where {CT1, CT2 <: Union{AbstractContext}}\n\nCreates an AndContextRule from two contexts or context rules using the & operator.\n\nArguments:\n\nc1, c2: Contexts or context rules\n\nReturns an AndContextRule.\n\nExample:     ctx1 & ctx2\n\n\n\n\n\n","category":"method"},{"location":"Contexts/#Base.:!-Tuple{Contexts.AbstractContext}","page":"Contexts","title":"Base.:!","text":"Base.:!(c::CT) where {CT <: Union{AbstractContext}}\n\nCreates a NotContextRule from a context or context rule using the ! operator.\n\nArguments:\n\nc: Context or context rule\n\nReturns a NotContextRule.\n\nExample:     !ctx\n\n\n\n\n\n","category":"method"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"","category":"page"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"Those expressions can be checked for activeness.","category":"page"},{"location":"Contexts/#Contexts.isActive-Tuple{Contexts.AbstractContextRule}","page":"Contexts","title":"Contexts.isActive","text":"isActive(contextRule::T) where {T <: AbstractContextRule}\n\nEvaluates whether a context rule is active. Supports And, Or, and Not context rules.\n\nArguments:\n\ncontextRule: An AbstractContextRule (And, Or, Not)\n\nReturns true if the rule is active, false otherwise.\n\nExample:     isActive(C1 & C2)\n\n\n\n\n\n","category":"method"},{"location":"Contexts/","page":"Contexts","title":"Contexts","text":"isActive(C1 & (C2 | !C3)) # returns true or false","category":"page"},{"location":"DynamicTeamsAndRoles/#Dynamic-Teams-and-Roles","page":"Dynamic Teams","title":"Dynamic Teams and Roles","text":"","category":"section"},{"location":"DynamicTeamsAndRoles/#Contexts.DynamicTeam","page":"Dynamic Teams","title":"Contexts.DynamicTeam","text":"DynamicTeam\n\nAbstract supertype for all dynamic team types. Dynamic Teams group roles and their relationships in a relational context. Dynamic teams allow runtime changes in team composition and cardinality.\n\nConcrete teams should be defined within the @newTeam and @newDynamicTeam macro.\n\n\n\n\n\n","category":"type"},{"location":"DynamicTeamsAndRoles/#Contexts.@newDynamicTeam","page":"Dynamic Teams","title":"Contexts.@newDynamicTeam","text":"@newDynamicTeam(contextName, teamName, teamContent)\n\nMacro to define a new DynamicTeam type for a context, with specified roles, attributes, and cardinalities. Creates a mutable struct subtype of DynamicTeam and role structs, and registers them.\n\nA dynamic team can change its role assignments over time, within the defined  cardinalities. Roles can be assigned and disassigned dynamically without dissolving\t the team. Roles might be optional (i.e., minimum cardinality can be zero).\n\nThere are role-specific cardinalities as well as team-wide cardinalities.\n\nArguments:\n\ncontextName: The context for the dynamic team\nteamName: The name of the dynamic team\nteamContent: Block containing:\n\n@IDAttribute: uniquely identifying attribute\n@relationalAttributes: relational attributes of the team\n@role: role definitions with cardinalities\n@minPlayers: minimum number of players in the team (default 2)\n@maxPlayers: maximum number of players in the team (default Inf)\n\n@role definitions must contain at least two roles including their cardinalities.\n\nThe syntax for defining roles is: \t@role RoleName << NaturalType [minCardinality..maxCardinality] begin \t\t# role-specific attributes \tend\n\nExample: @context Sports @newDynamicTeam BasketballTeam <: SportsTeam begin     @IDAttribute name::String     @maxPlayers 15     @relationalAttributes begin \t\tcity::String \tend     @role HeadCoach << Person [1] begin end \t@role PointGuard << Person <: Player [1..Inf] begin \t\tnumber::Int \tend     @role ShootingGuard << Person <: Player [1..Inf] begin         number::Int     end     @role SmallForward << Person <: Player [1..Inf] begin         number::Int     end     @role PowerForward << Person <: Player [1..Inf] begin         number::Int     end     @role Center << Person <: Player [1..Inf] begin         number::Int     end end\t\n\n\n\n\n\n@newDynamicTeam(contextName, teamName, teamContent)\n\nMacro to define a new DynamicTeam type with specified roles, attributes, and cardinalities. Creates a mutable struct subtype of DynamicTeam and role structs, and registers them.\n\nA dynamic team can change its role assignments over time, within the defined  cardinalities. Roles can be assigned and disassigned dynamically without dissolving\t the team. Roles might be optional (i.e., minimum cardinality can be zero).\n\nThere are role-specific cardinalities as well as team-wide cardinalities.\n\nArguments:\n\nteamName: The name of the dynamic team\nteamContent: Block containing:\n\n@IDAttribute: uniquely identifying attribute\n@relationalAttributes: relational attributes of the team\n@role: role definitions with cardinalities\n@minPlayers: minimum number of players in the team (default 2)\n@maxPlayers: maximum number of players in the team (default Inf)\n\n@role definitions must contain at least two roles including their cardinalities.\n\nThe syntax for defining roles is: \t@role RoleName << NaturalType [minCardinality..maxCardinality] begin \t\t# role-specific attributes \tend\n\nExample: @newDynamicTeam BasketballTeam <: SportsTeam begin     @IDAttribute name::String     @maxPlayers 15     @relationalAttributes begin \t\tcity::String \tend     @role HeadCoach << Person [1] begin end \t@role PointGuard << Person <: Player [1..Inf] begin \t\tnumber::Int \tend     @role ShootingGuard << Person <: Player [1..Inf] begin         number::Int     end     @role SmallForward << Person <: Player [1..Inf] begin         number::Int     end     @role PowerForward << Person <: Player [1..Inf] begin         number::Int     end     @role Center << Person <: Player [1..Inf] begin         number::Int     end end\t\n\n\n\n\n\n","category":"macro"},{"location":"DynamicTeamsAndRoles/#Contexts.assignRoles","page":"Dynamic Teams","title":"Contexts.assignRoles","text":"assignRoles(context::Union{Context, Nothing}, team::Team, roles...)\n\nAssigns roles to objects in a team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: Team\nroles...: Pairs of (object, Role)\n\nExample:     assignRoles(ctx, team, obj1 => RoleA, obj2 => RoleB)\n\n\n\n\n\nassignRoles(context::Union{Context, Nothing}, team::DynamicTeam, roles...)\n\nAssigns roles to objects in a dynamic team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam\nroles...: Pairs of (object, Role)\n\nExample:     assignRoles(ctx, team, obj1 => RoleA, obj2 => RoleB)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.disassignRoles","page":"Dynamic Teams","title":"Contexts.disassignRoles","text":"disassignRoles(context::Union{Context, Nothing}, t::Team, roles::Pair...)\n\nRemoves role assignments from objects in a team within a context.\n\nArguments:\n\ncontext: Context or nothing\nt: Team\nroles...: Pairs of (Role, object)\n\nExample:     disassignRoles(ctx, team, RoleA => obj1, RoleB => obj2)\n\n\n\n\n\ndisassignRoles(context::Union{Context, Nothing}, teamType::Type, roles::Pair...)\n\nRemoves role assignments from objects in a team type within a context.\n\nArguments:\n\ncontext: Context or nothing\nteamType: Team type\nroles...: Pairs of (Role, object)\n\nExample:     disassignRoles(ctx, TeamType, RoleA => obj1)\n\n\n\n\n\ndisassignRoles(context::Union{Context, Nothing}, team::DynamicTeam)\n\nRemoves all role assignments from a dynamic team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam\n\nExample:     disassignRoles(ctx, team)\n\n\n\n\n\ndisassignRoles(team::DynamicTeam)\n\nRemoves all role assignments from a dynamic team (no context).\n\nArguments:\n\nteam: DynamicTeam\n\nExample:     disassignRoles(team)\n\n\n\n\n\ndisassignRoles(context::Union{Context, Nothing}, teamType::Type, id)\n\nRemoves all role assignments from a dynamic team by type and id within a context.\n\nArguments:\n\ncontext: Context or nothing\nteamType: Team type\nid: Team id\n\nExample:     disassignRoles(ctx, TeamType, 1)\n\n\n\n\n\ndisassignRoles(teamType::Type, id)\n\nRemoves all role assignments from a dynamic team by type and id (no context).\n\nArguments:\n\nteamType: Team type\nid: Team id\n\nExample:     disassignRoles(TeamType, 1)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.@changeRoles","page":"Dynamic Teams","title":"Contexts.@changeRoles","text":"@changeRoles(context, team, id, attrs)\n\nMacro to change role assignments and disassignments in a dynamic team within a context.\n\nArguments:\n\ncontext: Context\nteam: DynamicTeam type\nid: Team id\nattrs: Block of assignments (object >> Role, object << Role)\n\nExample:     @changeRoles(ctx, MyDynTeam, 1, begin         obj1 >> RoleA         obj2 << RoleB     end)\n\n\n\n\n\n@changeRoles(team, id, attrs)\n\nMacro to change role assignments and disassignments in a dynamic team (no context).\n\nArguments:\n\nteam: DynamicTeam type\nid: Team id\nattrs: Block of assignments (object >> Role, object << Role)\n\nExample:     @changeRoles(MyDynTeam, 1, begin         obj1 >> RoleA         obj2 << RoleB     end)\n\n\n\n\n\n","category":"macro"},{"location":"DynamicTeamsAndRoles/#Contexts.changeRoles","page":"Dynamic Teams","title":"Contexts.changeRoles","text":"changeRoles(context::Union{Context, Nothing}, team::DynamicTeam, roleAssignment::Vector{Any}, roleDisassignment::Vector{Pair{T, DataType}})\n\nChanges role assignments and disassignments in a dynamic team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam\nroleAssignment: Vector of assignments (object, Role)\nroleDisassignment: Vector of disassignments (object, Role type)\n\nExample:     changeRoles(ctx, team, [(obj1, RoleA)], [(obj2, RoleB)])\n\n\n\n\n\nchangeRoles(context::Union{Context, Nothing}, team::DynamicTeam, roleAssignment::Vector{Pair{T, R}}, roleDisassignment::Vector{Any}) where T where R <: Role\n\nChanges role assignments in a dynamic team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam\nroleAssignment: Vector of assignments (object, Role)\nroleDisassignment: Vector of objects to disassign\n\nExample:     changeRoles(ctx, team, [(obj1, RoleA)], [obj2])\n\n\n\n\n\nchangeRoles(context::Union{Context, Nothing}, team::DynamicTeam, roleAssignment::Vector{Pair{T1, R}}, roleDisassignment::Vector{Pair{T2, DataType}}) where T1 where T2 where R <: Role\n\nChanges role assignments and disassignments in a dynamic team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam\nroleAssignment: Vector of assignments (object, Role)\nroleDisassignment: Vector of disassignments (object, Role type)\n\nExample:     changeRoles(ctx, team, [(obj1, RoleA)], [(obj2, RoleB)])\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.getDynamicTeam","page":"Dynamic Teams","title":"Contexts.getDynamicTeam","text":"getDynamicTeam(context::Union{Context, Nothing}, role::Role)\n\nReturns the dynamic team in a context that has a specific role.\n\nArguments:\n\ncontext: Context or nothing\nrole: Role type\n\nExample:     getDynamicTeam(MyContext, Manager)\n\n\n\n\n\ngetDynamicTeam(role::Role)\n\nConvenience function to getDynamicTeam with no context.\n\nArguments:\n\nrole: Role type\n\nExample:     getDynamicTeam(Manager)\n\n\n\n\n\ngetDynamicTeam(context::Union{Context, Nothing}, teamType::DataType, id::T) where T\n\nReturns a dynamic team by id in a context.\n\nArguments:\n\ncontext: Context or nothing\nteamType: Team type\nid: Id value\n\nExample:     getDynamicTeam(MyContext, MyDynTeam, :teamid, 123)\n\n\n\n\n\ngetDynamicTeam(teamType::DataType, id::T) where T\n\nConvenience function to getDynamicTeam with no context.\n\nArguments:\n\nteamType: Team type\nid: Id value\n\nExample:     getDynamicTeam(MyDynTeam, 123)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.getDynamicTeams","page":"Dynamic Teams","title":"Contexts.getDynamicTeams","text":"getDynamicTeams(context::Union{Context, Nothing}, teamType::Type)\n\nReturns all dynamic teams of a given type in a context.\n\nArguments:\n\ncontext: Context or nothing\nteamType: Team type\n\nExample:     getDynamicTeams(MyContext, MyDynTeam)\n\n\n\n\n\ngetDynamicTeams(teamType::Type)\n\nConvenience function to getDynamicTeams with no context.\n\nArguments:\n\nteamType: Team type\n\nExample:     getDynamicTeams(MyDynTeam)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.getDynamicTeamID","page":"Dynamic Teams","title":"Contexts.getDynamicTeamID","text":"getDynamicTeamID(context::Union{Context, Nothing}, team::DynamicTeam)\n\nReturns the properties of a dynamic team in a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam type\n\nExample:     getDynamicTeamID(MyContext, MyDynTeam)\n\n\n\n\n\ngetDynamicTeamID(team::DynamicTeam)\n\nConvenience function to getDynamicTeamID with no context.\n\nArguments:\n\nteam: DynamicTeam type\n\nExample:     getDynamicTeamID(MyDynTeam)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.getObjectsOfRole","page":"Dynamic Teams","title":"Contexts.getObjectsOfRole","text":"getObjectsOfRole(context::Union{Context, Nothing}, team::DynamicTeam, role::Type)\n\nReturns all objects in a context that have a specific role in a specific dynamic team.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam type\nrole: Role type\n\nExample:     getObjectsOfRole(MyContext, MyDynTeam, Manager)\n\n\n\n\n\ngetObjectsOfRole(team::DynamicTeam, role::Type)\n\nConvenience function to getObjectsOfRole with no context.\n\nArguments:\n\nteam: DynamicTeam type\nrole: Role type\n\nExample:     getObjectsOfRole(MyDynTeam, Manager)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.getRolesOfTeam","page":"Dynamic Teams","title":"Contexts.getRolesOfTeam","text":"getRolesOfTeam(context::Union{Context, Nothing}, team::Team)\n\nReturns all roles in a team in a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: Team type\n\nExample:     getRolesOfTeam(MyContext, MyTeam)\n\n\n\n\n\ngetRolesOfTeam(team::Team)\n\nConvenience function to getRolesOfTeam with no context.\n\nArguments:\n\nteam: Team type\n\nExample:     getRolesOfTeam(MyTeam)\n\n\n\n\n\ngetRolesOfTeam(context::Union{Context, Nothing}, team::DynamicTeam)\n\nReturns all roles in a dynamic team in a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: DynamicTeam type\n\nExample:     getRolesOfTeam(MyContext, MyDynTeam)\n\n\n\n\n\ngetRolesOfTeam(team::DynamicTeam)\n\nConvenience function to getRolesOfTeam with no context.\n\nArguments:\n\nteam: DynamicTeam type\n\nExample:     getRolesOfTeam(MyDynTeam)\n\n\n\n\n\n","category":"function"},{"location":"DynamicTeamsAndRoles/#Contexts.hasRole-Tuple{Context, Any, Type, DynamicTeam}","page":"Dynamic Teams","title":"Contexts.hasRole","text":"hasRole(context::Union{Context, Nothing}, obj, role::Type, team::DynamicTeam)\n\nChecks if an object has a specific role in a specific dynamic team in a context.\n\nArguments:\n\ncontext: Context or nothing\nobj: Object\nrole: Role type\nteam: DynamicTeam type\n\nReturns true or false.\n\nExample:     hasRole(MyContext, obj, Manager, MyDynTeam)\n\n\n\n\n\n","category":"method"},{"location":"DynamicTeamsAndRoles/","page":"Dynamic Teams","title":"Dynamic Teams","text":"Dynamic teams allow runtime changes in team composition and cardinality. Use @newDynamicTeam to define dynamic teams, and assignRoles, disassignRoles, and changeRoles to manage role assignments. Query dynamic teams and their roles with the provided functions.","category":"page"},{"location":"DynamicTeamsAndRoles/","page":"Dynamic Teams","title":"Dynamic Teams","text":"See also: assignRoles, changeRoles","category":"page"},{"location":"ContextModeling/#Context-Modeling","page":"Context Modeling","title":"Context Modeling","text":"","category":"section"},{"location":"ContextModeling/#Context-Constraints","page":"Context Modeling","title":"Context Constraints","text":"","category":"section"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"Context constraints define relationships between contexts, such as mutual exclusion, requirements, and alternatives. Use these functions to model rules for context activation. Note that, e.g., an exclusion between two contexts C1 and C2 does not mean that C1 will not be activated if C2 is already active. Instead, after activating C1, a Petri net will check if this activation complies with the defined constraints. If constraints are not fulfilled, the Petri net will heal the state by deactivating it again.","category":"page"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"The following constraints are defined:","category":"page"},{"location":"ContextModeling/#Contexts.exclusion-Tuple{Context, Context}","page":"Context Modeling","title":"Contexts.exclusion","text":"exclusion(c1::T1, c2::T2) where {T1, T2 <: Context}\n\nCreates a strict mutual exclusion rule between two contexts. When one context is active, the other context will be forced to deactivate and cannot be activated.\n\nArguments:\n\nc1, c2: Two contexts of any type that inherits from Context\n\nReturns true after creating and adding the Petri net rule to the control network.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.weakExclusion-Tuple{Context, Context}","page":"Context Modeling","title":"Contexts.weakExclusion","text":"weakExclusion(c1::T1, c2::T2) where {T1, T2 <: Context}\n\nCreates a weak mutual exclusion rule between two contexts. When one context becomes active, it will deactivate the other context, but the other context can be reactivated.\n\nArguments:\n\nc1, c2: Two contexts of any type that inherits from Context\n\nReturns true after creating and adding the Petri net rule to the control network.\n\n\n\n\n\nweakExclusion(c1::T1, c2::T2, args...) where {T1, T2 <: Context}\n\nCreates weak mutual exclusion rules between multiple contexts. Applies weakExclusion to every pair of contexts in the provided list.\n\nArguments:\n\nc1, c2: First two contexts\nargs...: Additional contexts\n\nReturns true after creating all Petri net rules.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.weakExclusion-Tuple{Context, Context, Vararg{Any}}","page":"Context Modeling","title":"Contexts.weakExclusion","text":"weakExclusion(c1::T1, c2::T2, args...) where {T1, T2 <: Context}\n\nCreates weak mutual exclusion rules between multiple contexts. Applies weakExclusion to every pair of contexts in the provided list.\n\nArguments:\n\nc1, c2: First two contexts\nargs...: Additional contexts\n\nReturns true after creating all Petri net rules.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.directedExclusion-Tuple{Pair{<:Context, <:Context}}","page":"Context Modeling","title":"Contexts.directedExclusion","text":"directedExclusion(p::Pair{T1, T2}) where {T1, T2 <: Context}\n\nCreates a one-way exclusion rule. When the first context becomes active, it forces the second context to deactivate.\n\nArguments:\n\np: A Pair where first element is the controlling context and second is the controlled context\n\nReturns true after creating and adding the Petri net rule.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.requirement","page":"Context Modeling","title":"Contexts.requirement","text":"requirement(p::Pair{T1, T2}) where {T1 <: Context, T2 <: Union{AbstractContextRule, Context}}\n\nCreates a requirement rule. The first context can only be active if the second context/rule is active. If second becomes inactive, first is forced to deactivate.\n\nArguments:\n\np: A Pair where first element must be a Context, second can be Context or ContextRule\n\nReturns true after creating and adding the Petri net rule.\n\n\n\n\n\n","category":"function"},{"location":"ContextModeling/#Contexts.weakExclusion-Tuple{Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1, T2<:Context}}","page":"Context Modeling","title":"Contexts.weakExclusion","text":"weakExclusion(c1::T1, c2::T2) where {T1, T2 <: Context}\n\nCreates a weak mutual exclusion rule between two contexts. When one context becomes active, it will deactivate the other context, but the other context can be reactivated.\n\nArguments:\n\nc1, c2: Two contexts of any type that inherits from Context\n\nReturns true after creating and adding the Petri net rule to the control network.\n\n\n\n\n\nweakExclusion(c1::T1, c2::T2, args...) where {T1, T2 <: Context}\n\nCreates weak mutual exclusion rules between multiple contexts. Applies weakExclusion to every pair of contexts in the provided list.\n\nArguments:\n\nc1, c2: First two contexts\nargs...: Additional contexts\n\nReturns true after creating all Petri net rules.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.weakExclusion-Tuple{Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2, Vararg{Any}}} where {T1, T2<:Context}}","page":"Context Modeling","title":"Contexts.weakExclusion","text":"weakExclusion(c1::T1, c2::T2) where {T1, T2 <: Context}\n\nCreates a weak mutual exclusion rule between two contexts. When one context becomes active, it will deactivate the other context, but the other context can be reactivated.\n\nArguments:\n\nc1, c2: Two contexts of any type that inherits from Context\n\nReturns true after creating and adding the Petri net rule to the control network.\n\n\n\n\n\nweakExclusion(c1::T1, c2::T2, args...) where {T1, T2 <: Context}\n\nCreates weak mutual exclusion rules between multiple contexts. Applies weakExclusion to every pair of contexts in the provided list.\n\nArguments:\n\nc1, c2: First two contexts\nargs...: Additional contexts\n\nReturns true after creating all Petri net rules.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.strongInclusion-Tuple{Pair{<:Union{Context, OrContextRule}, <:Context}}","page":"Context Modeling","title":"Contexts.strongInclusion","text":"strongInclusion(p::Pair{T1, T2}) where {T1 <: Union{OrContextRule, Context}, T2 <: Context}\n\nCreates a strong inclusion rule. Similar to weak inclusion, but also deactivates the first context if the second context becomes inactive while first is active.\n\nArguments:\n\np: A Pair where first element must be either a Context or OrContextRule, second must be a Context\n\nReturns true after creating and adding the Petri net rule. Throws an error if first element contains non-OR operations.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/#Contexts.alternative-Tuple{Vararg{Context}}","page":"Context Modeling","title":"Contexts.alternative","text":"alternative(contexts::Context...)\n\nCreates a rule ensuring exactly one context is active at all times from the given set of contexts. When one context is activated, any previously active context is deactivated. If the active context is deactivated, the deactivation is prevented.\n\nArguments:\n\ncontexts...: Variable number of Context arguments\n\nReturns true after creating and adding the Petri net rule to the control network. Throws an error if less than 2 contexts are provided.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"","category":"page"},{"location":"ContextModeling/#Context-Groups","page":"Context Modeling","title":"Context Groups","text":"","category":"section"},{"location":"ContextModeling/#Contexts.ContextGroup","page":"Context Modeling","title":"Contexts.ContextGroup","text":"ContextGroup\n\nGroups multiple contexts for alternative activation.\n\nFields:\n\nsubContexts: Vector of Contexts in the group.\n\nExample:     ContextGroup([ctx1, ctx2])\n\n\n\n\n\n","category":"type"},{"location":"ContextModeling/#Contexts.ContextGroup-Tuple{Vararg{Context}}","page":"Context Modeling","title":"Contexts.ContextGroup","text":"ContextGroup(subContexts::Context...)\n\nCreates a group of contexts, allowing alternative activation, meaning exactly one  context of the grouped contexts must be active. Returns a ContextGroup object containing the provided contexts.\n\nCalling the `ContextGroup` object returns the currently active context in the group.\n\n\n\n\n\n","category":"method"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"Context groups allow you to bundle contexts for alternative activation. Only one context in a group can be active at a time.","category":"page"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"Calling a context group returns the currently active context of this group. This can be helpful in combination with the @context macro:","category":"page"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"","category":"page"},{"location":"ContextModeling/#Context-State-Machines","page":"Context Modeling","title":"Context State Machines","text":"","category":"section"},{"location":"ContextModeling/#Contexts.@ContextStateMachine-Tuple{Any, Any}","page":"Context Modeling","title":"Contexts.@ContextStateMachine","text":"@ContextStateMachine(name, body)\n\nMacro to define a context state machine. Accepts a name and a body containing:\n\n@variable declarations\n@contexts declarations\n@initialState declaration\n@transition rules\n\nGenerates a ContextStateMachine instance with specified configuration.\n\nConditions of transitions are evaluated whenever a variable is set. Only Boolean expressions containing variables specified with @variable are allowed as conditions.\n\nExample: \t@ContextStateMachine MyStateMachine begin \t\t@variable x::Int = 0 \t\t@variable y::Float64 = 1.0 \t\t@contexts StateA, StateB, StateC \t\t@initialState StateA \t\t@transition StateA => StateB : x > 10 \t\t@transition StateB => StateC : y < 0.5 \t\t@transition StateC => StateA : x <= 10 && y >= 0.5 \tend\n\n\n\n\n\n","category":"macro"},{"location":"ContextModeling/#Contexts.ContextStateMachine","page":"Context Modeling","title":"Contexts.ContextStateMachine","text":"struct ContextStateMachine\n\nRepresents a state machine over contexts.\n\nvariables: Dict of variable names to value/type pairs.\ntransitions: Dict mapping contexts to transition expressions.\nsubContexts: Dict of context names to context instances.\n\n\n\n\n\n","category":"type"},{"location":"ContextModeling/","page":"Context Modeling","title":"Context Modeling","text":"Context state machines allow you to model transitions between contexts based on variable values and transition rules. Use the @ContextStateMachine macro to define a state machine, and checkStateMachineCondition to enforce transitions.","category":"page"},{"location":"TeamsAndRoles/#Teams-and-Roles","page":"Teams","title":"Teams and Roles","text":"","category":"section"},{"location":"TeamsAndRoles/#Why-Roles?","page":"Teams","title":"Why Roles?","text":"","category":"section"},{"location":"TeamsAndRoles/","page":"Teams","title":"Teams","text":"The difference of a Role compared to a Mixin is the following. While a Mixin can be defined single standing, a role is always defined within a group with other roles, which is called team. Roles can therefore only get assigned to an object, if all roles of this team are assigned at the same time. The team itself can have attributes that are connected to all roles of the team, e.g. the company, an employee, and an employer are working at.","category":"page"},{"location":"TeamsAndRoles/#Contexts.Role","page":"Teams","title":"Contexts.Role","text":"Role\n\nAbstract supertype for all role types. Roles represent context-dependent behaviors or responsibilities.\n\nConcrete roles should be defined within the @newTeam and @newDynamicTeam macro.\n\n\n\n\n\n","category":"type"},{"location":"TeamsAndRoles/#Contexts.Team","page":"Teams","title":"Contexts.Team","text":"Team\n\nAbstract supertype for all team types. Teams group roles and their relationships in a relational context.\n\nConcrete teams should be defined within the @newTeam and @newDynamicTeam macro.\n\n\n\n\n\n","category":"type"},{"location":"TeamsAndRoles/#Contexts.@newTeam","page":"Teams","title":"Contexts.@newTeam","text":"@newTeam(contextName, teamName, teamContent)\n\nMacro to define a new Team type for a context, with specified roles and attributes. Creates a mutable struct subtype of Team and role structs, and registers them.\n\nA Team always contains a fixed number of roles.  Once a team is created, the role assignment cannot be changed without  dissolving the team and creating a new one.\n\nArguments:\n\ncontextName: The context for the team\nteamName: The name of the team\nteamContent: Block containing:\n\n- @relationalAttributes: relational attributes of the team\n- @role: role definitions\n\n@role definitions must contain at least two roles. The syntax for defining roles is: \t@role RoleName << NaturalType [<: RoleSuperType] begin \t\t# role-specific attributes \tend\n\nExample: @context Tournament @newTeam ChessGame begin \t@relationalAttributes begin \t\tplace::String \tend \t@role BlackPlayer << Person <: Player begin \t\tend \t@role WhitePlayer << Person <: Player begin \t\tend end\n\n\n\n\n\n@newTeam(teamName, teamContent)\n\nMacro to define a new Team type without a context. Creates a mutable struct subtype of Team and role structs, and registers them.\n\nA Team always contains a fixed number of roles.  Once a team is created, the role assignment cannot be changed without  dissolving the team and creating a new one.\n\nArguments:\n\nteamName: The name of the team\nteamContent: Block containing:\n\n- @relationalAttributes: relational attributes of the team\n- @role: role definitions\n\n@role definitions must contain at least two roles. The syntax for defining roles is: \t@role RoleName << NaturalType [<: RoleSuperType] begin \t\t# role-specific attributes \tend\n\nExample: @newTeam ChessGame begin \t@relationalAttributes begin \t\tplace::String \tend \t@role BlackPlayer << Person <: Player begin \t\tend \t@role WhitePlayer << Person <: Player begin \t\tend end\n\n\n\n\n\n","category":"macro"},{"location":"TeamsAndRoles/#Contexts.assignRoles-Tuple{Union{Nothing, Context}, Team, Vararg{Any}}","page":"Teams","title":"Contexts.assignRoles","text":"assignRoles(context::Union{Context, Nothing}, team::Team, roles...)\n\nAssigns roles to objects in a team within a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: Team\nroles...: Pairs of (object, Role)\n\nExample:     assignRoles(ctx, team, obj1 => RoleA, obj2 => RoleB)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.disassignRoles-Tuple{Context, Team, Vararg{Pair}}","page":"Teams","title":"Contexts.disassignRoles","text":"disassignRoles(context::Union{Context, Nothing}, t::Team, roles::Pair...)\n\nRemoves role assignments from objects in a team within a context.\n\nArguments:\n\ncontext: Context or nothing\nt: Team\nroles...: Pairs of (Role, object)\n\nExample:     disassignRoles(ctx, team, RoleA => obj1, RoleB => obj2)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getRoles-Tuple{Context, Any, Type, Type}","page":"Teams","title":"Contexts.getRoles","text":"getRoles(context::Union{Context, Nothing}, obj, role::Type, teamType::Type)\n\nReturns all roles of a given type in a team of a given type for an object in a context.\n\nArguments:\n\ncontext: Context or nothing\nobj: Object\nrole: Role type\nteamType: Team type\n\nExample:     getRoles(MyContext, obj, Manager, ProjectTeam)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getRole-Tuple{Context, Any, DynamicTeam}","page":"Teams","title":"Contexts.getRole","text":"getRole(context::Union{Context, Nothing}, obj::T, team::DynamicTeam) where T\n\nReturns the role for an object in a dynamic team in a context.\n\nArguments:\n\ncontext: Context or nothing\nobj: Object\nteam: DynamicTeam type\n\nExample:     getRole(MyContext, obj, MyDynTeam)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getRolesOfTeam-Tuple{Context, Team}","page":"Teams","title":"Contexts.getRolesOfTeam","text":"getRolesOfTeam(context::Union{Context, Nothing}, team::Team)\n\nReturns all roles in a team in a context.\n\nArguments:\n\ncontext: Context or nothing\nteam: Team type\n\nExample:     getRolesOfTeam(MyContext, MyTeam)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getTeam","page":"Teams","title":"Contexts.getTeam","text":"getTeam(context::Union{Context, Nothing}, teamType::Type, rolePairs...)\n\nReturns the first team in a context that matches the given role pairs.\n\nArguments:\n\ncontext: Context or nothing\nteamType: Team type\nrolePairs: Vararg of role type and object type pairs\n\nExample:     getTeam(MyContext, MyTeam, RoleA=>Person, RoleB=>Manager)\n\n\n\n\n\n","category":"function"},{"location":"TeamsAndRoles/#Contexts.hasRole-Tuple{Context, Any, Type, Team}","page":"Teams","title":"Contexts.hasRole","text":"hasRole(context::Union{Context, Nothing}, obj, role::Type, team::Team)\n\nChecks if an object has a specific role in a specific team in a context.\n\nArguments:\n\ncontext: Context or nothing\nobj: Object\nrole: Role type\nteam: Team type\n\nReturns true or false.\n\nExample:     hasRole(MyContext, obj, Manager, MyTeam)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getTeamPartners-Tuple{Context, Any, Type, Team}","page":"Teams","title":"Contexts.getTeamPartners","text":"getTeamPartners(context::Union{Context, Nothing}, obj::Any, roleType::Type, team::Team)\n\nReturns the partner object in a team for the specified object and role type in a context.\n\nArguments:\n\ncontext: Context or nothing\nobj: Object to find partner for\nroleType: Role type\nteam: Team type\n\nReturns a partner group (Dict).\n\nExample:     getTeamPartners(ctx, alice, Manager, MyTeam)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getObjectOfRole-Tuple{Union{Nothing, Context}, Type, Type}","page":"Teams","title":"Contexts.getObjectOfRole","text":"getObjectOfRole(context::Union{Context, Nothing}, team::Type, role::Type)\n\nReturns all objects in a context that have a specific role in a specific team.\n\nArguments:\n\ncontext: Context or nothing\nteam: Team type\nrole: Role type\n\nExample:     getObjectOfRole(MyContext, MyTeam, Manager)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getObjectOfRole-Tuple{Union{Nothing, Context}, Role}","page":"Teams","title":"Contexts.getObjectOfRole","text":"getObjectOfRole(context::Union{Context, Nothing}, role::Role)\n\nReturns the object in a context that has a specific role.\n\nArguments:\n\ncontext: Context or nothing\nrole: Role type\n\nExample:     getObjectOfRole(MyContext, Manager)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/#Contexts.getObjectOfRole-Tuple{Role}","page":"Teams","title":"Contexts.getObjectOfRole","text":"getObjectOfRole(role::Role)\n\nConvenience function to getObjectOfRole with no context.\n\nArguments:\n\nrole: Role type\n\nExample:     getObjectOfRole(Manager)\n\n\n\n\n\n","category":"method"},{"location":"TeamsAndRoles/","page":"Teams","title":"Teams","text":"Teams and roles allow you to model collaborative structures in contexts. Use @newTeam to define teams and their roles, and assignRoles/disassignRoles to manage role assignments. Query roles and teams with the provided functions.","category":"page"},{"location":"TeamsAndRoles/","page":"Teams","title":"Teams","text":"See also: assignRoles, getRoles","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Contexts.jl-A-Julia-Package-for-Context-Oriented-Programming","page":"Home","title":"Contexts.jl - A Julia Package for Context-Oriented-Programming","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contexts.jl is a Julia package which implements syntax in Julia to allow context-orient-programming (COP) with roles and mixins. It also includes a Petri-net-based approach for the management of the contexts during runtime.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can find the code here on GitHub.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The current main developer is Christian Gutsche, feel free to contact him via e-mail: <christian.gutsche@tu-dresden.de>","category":"page"},{"location":"#Supporting-and-Citing","page":"Home","title":"Supporting and Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use Contexts.jl in research and you want to cite it, we would be grateful to cite the following publications:","category":"page"},{"location":"","page":"Home","title":"Home","text":"For context modeling and context-oriented programming:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@INPROCEEDINGS{10803426,\n  author={Gutsche, Christian and Prokopets, Volodymyr and Wang, Zizhe and Götz, Sebastian and Aßmann, Uwe},\n  booktitle={2024 50th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)}, \n  title={Context-Oriented Programming and Modeling in Julia with Context Petri Nets}, \n  year={2024},\n  volume={},\n  number={},\n  pages={1-9},\n  doi={10.1109/SEAA64295.2024.00011},\n  ISSN={2376-9521},\n  month={Aug},}","category":"page"},{"location":"","page":"Home","title":"Home","text":"For context-role-oriented modeling and programming:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@INPROCEEDINGS{11025887,\n  author={Gutsche, Christian and Götz, Sebastian and Prokopets, Volodymyr and Aßmann, Uwe},\n  booktitle={2025 IEEE/ACM 20th Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS)}, \n  title={Context-Role Oriented Programming in Julia: Advancing Swarm Programming}, \n  year={2025},\n  volume={},\n  number={},\n  pages={85-95},\n  doi={10.1109/SEAMS66627.2025.00017}}\n","category":"page"},{"location":"#Content","page":"Home","title":"Content","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The implementation was strongly influenced by the following works:","category":"page"},{"location":"","page":"Home","title":"Home","text":"T. Kühn, M. Leuthäuser, S. Götz, C. Seidl, and U. Aßmann, “A meta-model family for role-based modeling and programming languages”, in Software Language Engineering (B. Combemale, D. J. Pearce, O. Barais, and J. J. Vinju, eds.), (Cham), pp. 141–160, Springer International Publishing, 2014.\nR. Hirschfeld, P. Costanza, and O. Nierstrasz, “Context-oriented programming”, Journal of Object Technology, 2008.\nR. Muschevici, D. Clarke, and J. Proenca, “Feature petri nets”, vol. 2, pp. 99–106, 01 2010.\nN. Cardozo, S. González, K. Mens, and T. D’Hondt, “Context Petri Nets: Definition and Manipulation”, Vrije Universiteit Brussel, Apr. 2012.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was developed within a research project of the Boysen–TU Dresden–Research Training Group and the Chair of Software Technology at TU Dresden. We want to thank the Boysen–TU Dresden–Research Training Group for the financial and general support that has made the developement possible. The Research Training Group is co-financed by the Friedrich and ElisabethBoysen Foundation and the TU Dresden. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The work is also supported by the German Research Foundation with the STRASSE project (SFB/TRR339, Project ID453596084).","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"Mixins/#Mixins","page":"Mixins","title":"Mixins","text":"","category":"section"},{"location":"Mixins/#Why-Mixins-and-Roles?","page":"Mixins","title":"Why Mixins and Roles?","text":"","category":"section"},{"location":"Mixins/","page":"Mixins","title":"Mixins","text":"Just like contexts, mixins and roles is a concept to enhance the possibilities for modeling dynamic systems. In classical object-oriented programming (OOP), a person and an employee, both would be represented as a class. But there is a natural difference: while a person is a person for their entire life, a person might become an employee and quit the job multiple times during lifetime. Classical OOP is too restricted to sufficiently represent those dynamics. Roles and mixins is a concept to deal with that.","category":"page"},{"location":"Mixins/#Mixins-2","page":"Mixins","title":"Mixins","text":"","category":"section"},{"location":"Mixins/#Contexts.Mixin","page":"Mixins","title":"Contexts.Mixin","text":"Mixin\n\nAbstract supertype for all mixin types. Mixins allow context-dependent extension of types.\n\nConcrete mixins should be defined with the @mixin macro.\n\n\n\n\n\n","category":"type"},{"location":"Mixins/#Contexts.@newMixin-Tuple{Any, Any, Any}","page":"Mixins","title":"Contexts.@newMixin","text":"@newMixin(context, mixin, attributes)\n\nMacro to define a new Mixin type for a context, with specified attributes. Creates a mutable struct subtype of Mixin and registers it for the context.\n\nArguments:\n\ncontext: The context to associate the mixin with\nmixin: The mixin type (with contextual type, e.g. MyMixin<<MyType)\nattributes: Fields for the mixin struct\n\n\n\n\n\n","category":"macro"},{"location":"Mixins/#Contexts.addMixin-Tuple{Context, Type, Symbol}","page":"Mixins","title":"Contexts.addMixin","text":"addMixin(context, contextualType, mixinNameSymbol)\n\nAdds a mixin within a context for a given contextual type to the manager.\n\nArguments:\n\ncontext: Context\ncontextualType: Type to associate the mixin with\nmixinNameSymbol: Symbol of the mixin type\n\nExample:     addMixin(MyContext, MyType, :MyMixin)\n\n\n\n\n\n","category":"method"},{"location":"Mixins/#Contexts.assignMixin-Tuple{Context, Pair}","page":"Mixins","title":"Contexts.assignMixin","text":"assignMixin(context::Context, pair::Pair)\n\nAssigns a mixin to a type in a given context.\n\nArguments:\n\ncontext: Context\npair: Pair of (type, mixin)\n\nExample:     assignMixin(ctx, MyType => MyMixin())\n\n\n\n\n\n","category":"method"},{"location":"Mixins/#Contexts.disassignMixin-Tuple{Context, Pair}","page":"Mixins","title":"Contexts.disassignMixin","text":"disassignMixin(context::Context, pair::Pair)\n\nRemoves a mixin assignment from a type in a given context.\n\nArguments:\n\ncontext: Context\npair: Pair of (type, mixin)\n\nExample:     disassignMixin(ctx, MyType => MyMixin())\n\n\n\n\n\n","category":"method"},{"location":"Mixins/#Contexts.hasMixin-Tuple{Context, Any, Type}","page":"Mixins","title":"Contexts.hasMixin","text":"hasMixin(context::Context, obj, mixin::Type)\n\nChecks if an object has a mixin of the given type in a context.\n\nArguments:\n\ncontext: Context\nobj: Object\nmixin: Mixin type\n\nReturns true or false.\n\nExample:     hasMixin(MyContext, obj, MyMixin)\n\n\n\n\n\n","category":"method"},{"location":"Mixins/#Contexts.getMixins","page":"Mixins","title":"Contexts.getMixins","text":"getMixins()\n\nReturns all mixin definitions for all contexts.\n\nExample:     getMixins()\n\n\n\n\n\ngetMixins(type)\n\nReturns all mixin instances for a given type.\n\nArguments:\n\ntype: Type\n\nExample:     getMixins(MyType)\n\n\n\n\n\ngetMixins(context::Context, type)\n\nReturns all mixin instances for a type in a context.\n\nArguments:\n\ncontext: Context\ntype: Type\n\nExample:     getMixins(MyContext, MyType)\n\n\n\n\n\n","category":"function"},{"location":"Mixins/#Contexts.getObjectsOfMixin-Tuple{Context, Type}","page":"Mixins","title":"Contexts.getObjectsOfMixin","text":"getObjectsOfMixin(context::Context, mixin::Type)\n\nReturns all objects in a context that have a mixin of the given type.\n\nArguments:\n\ncontext: Context\nmixin: Mixin type\n\nExample:     getObjectsOfMixin(MyContext, MyMixin)\n\n\n\n\n\n","category":"method"},{"location":"Mixins/","page":"Mixins","title":"Mixins","text":"Mixins allow you to extend types with context-dependent behavior. Use @newMixin to define mixin types, and assignMixin/disassignMixin to manage mixin assignments in contexts.","category":"page"},{"location":"Mixins/","page":"Mixins","title":"Mixins","text":"See also: assignMixin, getMixins","category":"page"}]
}
